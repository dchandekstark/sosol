:javascript
  
  var subref_start;
  var subref_end;
  var target_num = 1;
  var current_target;
  var all_targets = $H();
  
  function get_target_passage() {
    var request_url = "#{root_url}cts/getpassage/" +
      "#{@identifier.parentIdentifier.id}/" + jQuery('#target_urn').val();
    fetch(request_url)
      .then(response => response.text())
      .then(data => {set_target_content(data)})
      .catch(error => {
        jQuery('#target_content').innerHTML = '<div class="error">Unable to load the requested text.</div>';
      });
  }
  
  function add_target() {
    next_target = ++target_num;
    input_name = '#target_uri' + next_target;
   jQuery('#targets').insert('<br/>' +
      '<input class="target_uri" type="text" id="' + input_name + '" name="' + input_name + '">' + 
      '<button class="remove_target_uri" id="remove_' + input_name + '">Remove</button>');
    current_target = $(input_name);
    $(input_name).bind('click', select_target_input);
    jQuery('#remove_' + input_name).bind('click', remove_target_input);
    return false;
  }
  
  function remove_target_input(a_e) {
    to_remove = a_e.element();
    target_input = $(to_remove).previous();
    target_name = target_input.name;
    $(target_input).remove();
    $(to_remove).remove();
    toggle_highlight(false,['selected','highlighted'],[target_name]);
    all_targets.unset(target_name);
    return false;
  }
  
  function select_target_input(a_e) {
    last_target = current_target;
    current_target = a_e.element();
    toggle_highlight(false,['selected'],[last_target.name]);
    toggle_highlight(true,['selected'],[current_target.name])
  }
  
  function start_target(a_e) {
    var rp = a_e.element();
    if ($(rp).hasClassName('punc')) {
      $(rp).next();
    } else {
      subref_start = rp;
    }
    
    toggle_highlight(false,['highlighted','selected']);
  }
  
  function end_target(a_e) {
    var rp = a_e.element();
    if ($(rp).hasClassName('punc')) {
      subref_end = $(rp).previous();
    } else {
      subref_end = rp;
    }
    if (subref_start == null || subref_end == null) {
      alert("Unable to identify the selected range. Please try your selection again.");
      return;
    }
    var start_ref = subref_start.readAttribute('data-ref');
    var end_ref = subref_end.readAttribute('data-ref')
    if (start_ref == null || end_ref == null) {
      alert("Unable to read the selected range. Please try your selection again.");
      return;
    }
    var uri = jQuery('#src').value + "/" + jQuery('#target_urn').value + "#" + start_ref;
    // no span needed if the start and end are the same
    if (end_ref != start_ref) {
      uri = uri + '-' + end_ref;
    }
    current_target.value = uri;
    all_targets.set(current_target.name,[subref_start,subref_end]);
    toggle_highlight(true,['highlighted']);
    toggle_highlight(true,['selected'],[current_target.name]);
  }
  
  
  function toggle_highlight(a_on,a_classes,a_targets) {  
    if (a_targets == null) {
      targets = all_targets.keys();
    } else { 
      targets = a_targets;
    }
    targets.each(
      function(name) { 
        var set = all_targets.get(name);
        if (set && set != null) {
          a_classes.each(
            function(a_class) {
              if (a_on) {
                $(set[0]).addClassName(a_class);
              } else {
                $(set[0]).removeClassName(a_class);
              }
              
            }
          );
          var sibs = $(set[0]).nextSiblings();
          var done = false;
          if (set[0] != set[1]) {
            for (var i=0; i<sibs.length; i++) {
              if (done) {
                break;
              }
              a_classes.each(
                function(a_class) {
                  if (a_on) {
                    $(sibs[i]).addClassName(a_class);
                  } else {
                    $(sibs[i]).removeClassName(a_class);
                  }
                  if (sibs[i] == set[1]) {
                    done = true;
                  }
                }
              ); // end class iterator
            }  // end loop through siblings
          } // end test on set length
        } // end test on set definition
      } // end iterator on each target
    );
  }
  
  function set_target_content(a_html) {
    var target = jQuery('#target_content');
    jQuery('#target_content').innerHTML = a_html;
    jQuery('.target_uri').each(
      function(i, elem) {
        var uri = $(elem).getValue();
        var u_match = uri.match(/^.*?urn:cts:(.*)$/)
        if (u_match != null) {
          var parts = u_match[1].split(/:/);
          if (parts.length == 3) {
            var r_match = parts[2].match(/^.*?#(.*)$/);
            var r_start;
            var r_end;
            if (r_match != null) {
              var r_parts = r_match[1].split(/-/);
              if (r_parts.length > 0) {
                r_start = r_parts[0];
                r_end = r_parts[1];
              } else {
                r_start = r_parts;
                r_end = r_parts;
              }
              var start_token = jQuery(".token.text[data-ref=" + r_start + "]")
              var end_token = jQuery(".token.text[data-ref=" + r_end + "]")
              // highlight the tokens if able to find them
              if (start_token != null && end_token != null && start_token.length == 1 && end_token.length == 1) {
                all_targets.set(elem.name,[start_token[0],end_token[0]]);
              }
            }
          }
        }
      }
    );
    toggle_highlight(true,['highlighted','selected']);
  }
  
  function check_input() {
    var all_targets = jQuery('.target_uri');
    var valid_targets = [];
    var invalid_targets = [];
    all_targets.each(
      function(elem) { 
        if( $(elem).getValue().match(/^https?:/) != null ) {
          valid_targets.push(elem);
        }
      }
    );
    all_targets.each(
      function(elem) { 
        if($(elem).getValue().match(/^https?:/) == null) {
          invalid_targets.push(elem);
        }
      }
    );
    var valid_body = ( jQuery('#body_uri').getValue().match(/^https?:/) != null);
    var messages = [];
    if (! valid_targets || valid_targets.length == 0) {
      messages.push("You need to specify at least one valid uri as an annotation target.");
    }
    if (invalid_targets && invalid_targets.length > 0) {
      messages.push("You have one more more invalid annotation target uris specified.");
    }
    if (! valid_body) {
      messages.push("You need to specify a valid uri as the annotation body.");
    }
    // TODO we need also to check that the target rnages don't overlap
    if (messages.length > 0) {
      alert(messages.join("\n"));
      return false;
    } else {
      if (Array.isArray(valid_targets)) {
        jQuery('#valid_targets').value = $(valid_targets).collect(function(elem) { return elem.name; }).join(',');
      }
      else
      {
        jQuery('#valid_targets').value = valid_targets.name;
      }
      return true;
    }
  }
  
  function post_to_alpheios() {
    if (check_input()) {
      var target_urn = jQuery('.target_uri')[0].getValue();
      var body_urn = jQuery('#body_uri').getValue();
      if (jQuery('#target_content span.token.text.highlighted').length > 100) {
        alert("Target text must not exceed 100 words");
        return false;
      }
      if (jQuery('#body_content span.token.text.highlighted').length > 100) {
        alert("Body text must not exceed 100 words");
        return false;
      }
      if (jQuery('#target_content span.token.text.highlighted').length == 0) {
        alert("You must highlight at least one word to align in the annotation target text.");
        return false;
      }
      if (jQuery('#body_content span.token.text.highlighted').length == 0 ) {
        alert("You must highlight at least one word to align in the annotation body text.");
        return false;
      }
      var target_text = '';
      var body_text = '';
      jQuery('#target_content span.token.highlighted').each(
        function(i, a_elem) {
          target_text = target_text + a_elem.textContent;
        }
      )
      jQuery('#body_content span.token.highlighted').each(
        function(i, a_elem) {
          body_text = body_text + a_elem.textContent;
        }
      )
      
      jQuery('#l1text').value = target_text;
      jQuery('#l2text').value = body_text;
      jQuery('#l1').value = 'grc';
      jQuery('#l2').value = 'grc';
      jQuery('#l1urn').value = target_urn;
      jQuery('#l2urn').value = body_urn;
      return true;
      
    }
    return false;
    
  }
  
  function confirm_delete() {
    return confirm("Are you sure you want to delete this annotation?");
  }
    
  jQuery(document).ready( function() {    
    get_target_passage();
    jQuery('#target_uri1').bind('click', select_target_input);
    jQuery('.remove_target_uri').each( 
      function(i, a_e) {
        $(a_e).bind('click',remove_target_input);
      }
    ); 
    jQuery('#target_content').bind('mousedown',start_target);
    jQuery('#target_content').bind('mouseup',end_target);
    current_target = jQuery('#target_uri1');
  });

.append
  %h3 
  - if @identifier[:action] == 'append' 
    Add Annotation
  - else
    Update Annotation
  %p
  = form_for @identifier, :url => { :action => @identifier[:action], :controller => "cts_oac_identifiers"}, :html => {:onsubmit => 'return check_input();'} do |form|
    = hidden_field_tag 'publication_id',@publication.id
    = hidden_field_tag 'id',@identifier.id
    = hidden_field_tag 'collection',params[:collection]
    = hidden_field_tag 'src',params[:src]
    = hidden_field_tag 'target_urn', params[:target_urn]
    = hidden_field_tag 'valid_targets',nil
    = hidden_field_tag 'annotation_uri',params[:annotation_uri]
    %ul.hints
      %li
        Enter a URI identifying a resource that annotates your selected passage.   
      %li 
        Or choose an annotation resource from the drop-downs and click 
        'Request Resource' to load the corresponding text. 
      %li 
        You can also select more specific passages within either text with your mouse. This will automatically
        generate a more specific URI for your annotation. 
    #annotation_target_input
      .annotation_header Annotation Target
      #fieldset{:id => 'annotation_target_fields'}
        .targets{:id => 'targets'}
          = label_tag 'URI for Target:'
          %br
          -if params[:valid_targets].nil?
            = text_field_tag 'target_uri1', "#{params[:src]}/#{params[:target_urn]}", { :class => 'target_uri'}
          -else
            -params[:valid_targets].split(',').each_with_index do |t,i|
              = text_field_tag t, params[t], { :class => 'target_uri'}
              -if i > 0
                %button{:class=> '.remove_target_uri', :id => 'remove_target_uri'+(i+1).to_s}Remove
        .add_target
          = label_tag '(to select another range from within this passage)'
          %button{:onclick => 'return add_target();'}Add   
      = label_tag 'Target Passage:'
      .target{:id => 'target_content' }
        .loading Loading...
      #annotation_title_input
        = select_tag("annotation_title", options_for_select({'isQuotationOf' => 'isQuotedBy','isSpokenBy' => 'isDirectSpeakerOf', 'isReferenceTo' => 'hasReference','isEquivalentTo'=>'hasEquivalent'}))
    #annotation_body_input
      .annotation_header Annotation Resource      
      = label_tag 'URI for Resource:'
      = text_field_tag 'body_uri', params[:body_uri], { :class => 'body_uri'}
      = render(:partial => 'cts_annotation_selector')

    #annotation_form_submit
      -if @identifier[:action] == 'update'
        = button_to "Save"
        = form_for @identifier, :url => { :action => 'delete_annotation', :controller => "cts_oac_identifiers"}, :html => {:onsubmit => 'return confirm_delete();'} do |form|
          = hidden_field_tag 'annotation_uri',params[:annotation_uri]
          = hidden_field_tag 'publication_id',@publication.id
          = hidden_field_tag 'id',@identifier.id
          = button_to "Delete"  
      -else
        = button_to "Save"
  %form{:id=>'to_alpheios_align', :method => 'GET', :action => ALPHEIOS_URL, :onsubmit => 'return post_to_alpheios();', :target =>'alpheios'}
    = hidden_field_tag 'l1text',nil
    = hidden_field_tag 'l1',nil
    = hidden_field_tag 'l1urn', nil
    = hidden_field_tag 'l2text',nil
    = hidden_field_tag 'l2', nil
    = hidden_field_tag 'l2urn', nil
    = button_to "Align in Alpheios"

