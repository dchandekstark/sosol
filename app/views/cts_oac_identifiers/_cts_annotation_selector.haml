:javascript
  
  var inventories = {};
  var body_span = [];
  var repos = {};
  var body_urn_parts = {};
  var body_subref_start;
  var body_subref_end;
  
  function get_repos() {
    var request_url = "#{root_url}cts/getrepos";
    fetch(request_url)
      .then(response => response.json())
      .then(data => { repos = data} );
  }
  
  function populate_body_repo() {
    update_body_urn_parts();
    for (key in repos.keys) {
      jQuery('#body_repo').append("<option value='" + key + "'>" + key + "</option>");
    }
    jQuery('#body_repo').append("<option value='-'>click to select...</option>");
    jQuery('#body_repo').children().each(function(i, o){
        if(o.value==body_urn_parts.repos){o.selected = true;get_inventory();return false;}
      });
  }
  
  function get_inventory()
  {
      var inventory = jQuery('#body_repo').val();
      if (inventory == '-') {
        update_group_urns();
      // if we don't already have this inventory's data, retrieve it and populate the selector
      } else if (inventories[inventory] == null) {
          var request_url = "#{root_url}cts/getcapabilities/" + inventory;
          fetch(request_url)
            .then(response => response.json())
            .then(data => {
              inventories[inventory] = data;
              update_group_urns();
            });

      }
      else {
        update_group_urns();
      }
  }
  
  
  function clear_selector(select_element) {
    select_element.children().remove();
  }
  
  function populate_selector(select_element,options,selected_value) {
    select_element.children().remove();
    
    var count = 0
    for (var i in options)
    {
      if (options[i].urn != null) {
        select_element.append("<option value='" + options[i].urn + "'>" + options[i].label + "</option>");
        count++;
      }
    }
    if (count == 0) {
      select_element.prop('disabled', true);
      select_element.hide();
    } else {
      if (count > 1) {
        select_element.append("<option value=''>click to select...</option>");
      } 
      select_element.prop('disabled', false);
      select_element.show();
    }
    select_element.children().each(function(o){
        if(o.value == selected_value){
          o.selected = true;
          return false;
        }
    });
  }
  
  function update_group_urns() {
    jQuery('#request_button').prop('disabled', true);
    clear_selector(jQuery('#version_urn'));
    clear_selector(jQuery('#work_urn'));
    var inventory = jQuery('#body_repo').val();
    if (inventory == '-') {
      clear_selector(jQuery('#group_urn'));
    } else {
      //  populate the textgroup selector
      var groups = inventories[inventory];
      populate_selector(jQuery('#group_urn'),groups,body_urn_parts.textgroup);
      update_work_urns();
    }
  }
  
  function update_work_urns() {
    jQuery('#request_button').prop('disabled', true);
    clear_selector(jQuery('#version_urn'));
    // get the works for the selected textgroup and populate the work selector
    var inventory = jQuery('#body_repo').val();
    var textgroup = jQuery('#group_urn').val();
    if (textgroup) { 
      var works = inventories[inventory][textgroup].works;
      populate_selector(jQuery('#work_urn'),works,body_urn_parts.work);
      update_version_urns();
    }
  }
  
  function update_version_urns()
  {
    jQuery('#request_button').prop('disabled', true);
    // get the editions for the selected textgroup and work and populate the edition selector
    var inventory = jQuery('#body_repo').val();
    var textgroup = jQuery('#group_urn').val();
    var work = jQuery('#work_urn').val();
    var editions = null;
    if (inventory && textgroup && work) {
      work = work.replace(textgroup+".",''); 
      editions = inventories[inventory][textgroup].works[work].editions
    }
    if (editions != null ) {
      populate_selector(jQuery('#version_urn'),editions,body_urn_parts.version)
    } else {
      // still need to empty it out
      populate_selector(jQuery('#version_urn'),{})
      jQuery('#request_button').prop('disabled', true);
    }
    update_cite_info();
  }
  
  function update_body_urn_parts() {
    // check to see if the pre-populated URI is from one of the registered repositories
    urn_match = jQuery('#body_uri').val().match(/^(.*?)\/(urn:cts:.*)$/)    
    if (urn_match != null) {
      urispace = urn_match[1];
      urn = urn_match[2];
      body_urn_parts.repos = repos.urispaces[urispace];
      urn_parts = urn.split(':');
      version_parts = urn_parts[3].split('.');
      body_urn_parts.textgroup = urn_parts[2] + ':' + version_parts[0];
      body_urn_parts.work = urn_parts[2] + ':' + version_parts[0] + "." + version_parts[1];
      body_urn_parts.version = [urn_parts[0],urn_parts[1],urn_parts[2],urn_parts[3]].join(':');
      if (urn_parts.length == 5) {
        body_urn_parts.passage = urn_parts[4].split('#')[0];
      }
    } 
    else {
      body_urn_parts = {}; 
    }
  }
  
  function update_cite_info() {
    // clear the #citeinfo div in the form
    jQuery('#citeinfo').innerHTML = '';
    jQuery('#request_button').prop('disabled', true);
    // get the current edition and repo from the form input
    var inventory = jQuery('#body_repo').val();
    var textgroup = jQuery('#group_urn').val();
    var work = jQuery('#work_urn').val();
    if (inventory && textgroup && work) { 
      work = work.replace(textgroup+".",'');
      var version = jQuery('#version_urn').val().replace('urn:cts:'+ textgroup + "." + work + ".",'')
      // lookup citation labels from stored inventory data
      // for each citation level, add label and input to the #citeinfo div in the form
      citeinfo = inventories[inventory][textgroup].works[work].editions[version].cites
      var range = body_urn_parts.passage ? body_urn_parts.passage.split('-') : [];
      var values = [];
      for (var i=0; i<range.length;i++) {
        values[i] = range[i].split('.');
      } 
      jQuery('#citeinfo').append('<span class="cite_span_label">From:</span>');
      
      for (var i=0; i<citeinfo.length; i++) {
        var value = (values[0] != null && values[0].length == citeinfo.length) ? values[0][i] : '';
        jQuery('#citeinfo').append(
          '<label class="cite_from_label" for="cite_from' + i + '">' + citeinfo[i] + '</label>' +
          '<input type="text" name="cite_from_' + i + '" class="cite_from" value="' + value +'"/>');
      }
      jQuery('#citeinfo').append('<br/><span class="cite_span_label">To:</span>');
        for (var i=0; i<citeinfo.length; i++) {
          var value = (values[1] != null && values[1].length == citeinfo.length) ? values[1][i] : '';
          jQuery('#citeinfo').append(
            '<label class="cite_to_label" for="cite_to' + i + '">' + citeinfo[i] + '</label>' +
            '<input type="text" name="cite_to_' + i + '" class="cite_to" value="' + value +'"/>');
        }
    }
    jQuery('#request_button').prop('disabled', false);
  }
  
  // Merges the individual components of the citation into the passage component of a CTS URN
  // and validates that at least one component of the starting citation was supplied before
  // submitting the form.
  function merge_cite_info() {
    var start =  jQuery('input[class="cite_from"]').map(function(e) { return e.value; }).grep(/[\w\d]+/);
    if (start.length == 0 ) {
      alert("Please specify at least one level of the passage citation scheme.");
      return false;
    }
    var end = jQuery('input[class="cite_to"]').map(function(e) { return e.value; }).grep(/[\w\d]+/);
    if (end.length > 0 && end.length != start.length) {
      alert("Citation start and end must be at the same citation level.");
      return false;
    }
    var uri = repos.keys[jQuery('#body_repo').val()] + "/" + jQuery('#version_urn').val() + ':' + start.join('.');
    if (end.length > 0) {
      uri = uri + '-' + end.join('.');
    }
    var uri_match = new RegExp("^" + uri + '#');
    var old_uri_value = jQuery('#body_uri').val();
    if (old_uri_value.match(uri_match) == null) {
      jQuery('#body_uri').val(uri);
    }
    get_body_passage();
    return false;
  }
  
  function get_body_passage() {
    jQuery('#body_content').innerHTML = '<div class="loading">Loading...</div>';
    var passage =  jQuery('input[class="cite_from"]').map(function(e) { return e.value; }).grep(/[\w\d]+/).join('.');
    var end_range = jQuery('input[class="cite_to"]').map(function(e) { return e.value; }).grep(/[\w\d]+/).join('.');
    if (end_range.length > 0) {
      passage = passage + '-' + end_range;
    }
    var request_url = "#{root_url}cts/getpassage/" + jQuery('#body_repo').val() + "/" + jQuery('#version_urn').val() + ":" + passage;
    fetch(request_url)
      .then(response => response.text())
      .then(data => {set_body_content(data)})
      .catch(error => {
        jQuery('#body_content').innerHTML = '<div class="error">Unable to load the requested text.</div>';
      });
  }
  
  function start_body(a_e) {
    var rp = a_e.target;
    if (jQuery(rp).hasClass('punc')) {
      body_subref_start = jQuery(rp).next()[0];
    } else {
      body_subref_start = rp;
    }
    
    toggle_body_highlight(false,['highlighted','selected']);
  }
  
  function end_body(a_e) {
    var rp = a_e.target;
    if (jQuery(rp).hasClassName('punc')) {
      body_subref_end = jQuery(rp).prev()[0];
    } else {
      body_subref_end = rp;
    }
    if (body_subref_start == null || body_subref_end == null) {
      alert("Unable to identify the selected range. Please try your selection again.");
      return;
    }
    var start_ref = body_subref_start.readAttribute('data-ref');
    var end_ref = body_subref_end.readAttribute('data-ref')
    if (start_ref == null || end_ref == null) {
      alert("Unable to read the selected range. Please try your selection again.");
      return;
    }
    body_span = [body_subref_start,body_subref_end];
    var new_uri = jQuery('#body_uri').val().split('#')[0] + "#" + start_ref;
    if (end_ref != start_ref) {
        new_uri = new_uri + '-' + end_ref;
     }
    jQuery('#body_uri').val(new_uri);
    toggle_body_highlight(true,['highlighted']);
  }
  
  function toggle_body_highlight(a_on,a_classes) {  
        var set = body_span
        if (set && set != null && set.length > 0) {
          a_classes.each(
            function(a_class) {
              if (a_on) {
                jQuery(set[0).addClass(a_class);
              } else {
                jQuery(set[0]).removeClass(a_class);
              }
              
            }
          );
          var sibs = $(set[0]).nextSiblings();
          var done = false;
          if (set[0] != set[1]) {
            for (var i=0; i<sibs.length; i++) {
              if (done) {
                break;
              }
              a_classes.each(
                function(a_class) {
                  if (a_on) {
                    jQuery(sibs[i).addClass(a_class);
                  } else {
                    jQuery(sibs[i]).removeClass(a_class);
                  }
                  if (sibs[i] == set[1]) {
                    done = true;
                  }
                }
              ); // end class iterator
            }  // end loop through siblings
          } // end test on set length
        } // end test on set definition
  }
  
  function set_body_content(a_html) {
    var body = jQuery('#body_content');
    jQuery('#body_content').innerHTML = a_html;
    var uri = jQuery('#body_uri').val();
    var u_match = uri.match(/^.*?urn:cts:(.*)$/)
    if (u_match != null) {
      var parts = u_match[1].split(/:/);
      if (parts.length == 3) {
        var r_match = parts[2].match(/^.*?#(.*)$/);
        var r_start;
        var r_end;
        if (r_match != null) {
          var r_parts = r_match[1].split(/-/);
          if (r_parts.length > 0) {
            r_start = r_parts[0];
            r_end = r_parts[1];
          } else {
            r_start = r_parts;
            r_end = r_parts;
          }
          body_span = [
            jQuery("#body_content .token.text[data-ref=" + r_start + "]")[0],
            jQuery("#body_content .token.text[data-ref=" + r_end + "]")[0]
            ]
        }
      }
    }
    toggle_body_highlight(true,['highlighted']);
  }
  
  jQuery(document).ready(function() {
    get_repos();
    jQuery('#group_urn').bind('change',update_work_urns);
    jQuery('#work_urn').bind('change',update_version_urns);
    jQuery('#version_urn').bind('select',update_cite_info);
    jQuery('#body_content').bind('mousedown',start_body);
    jQuery('#body_content').bind('mouseup',end_body);
  });
    
%p{:class => ['cts_selector_hint']}== Or select from a CTS Repository:
= select_tag 'body_repo', nil, :onchange => "get_inventory();"
= select_tag 'group_urn', nil, :disabled => true, :style => 'min-width: 5em;'
= select_tag 'work_urn', nil, :disabled => true, :style => 'min-width: 5em;'
= select_tag 'version_urn', nil, :disabled => true, :style => 'min-width: 5em;'
#citeinfo
%button{:disabled => true, :id => 'request_button', :onclick => "return merge_cite_info();"}Request Resource
%p Resource passage:
#body_content 
    